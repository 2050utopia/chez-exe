ChezScheme Self-Hosting Executable

The goal of this project is to produce standalone executables that are
a complete ChezScheme system and contain a scheme program.
This works by embedding the ChezScheme bootfiles and a scheme program
into the executable.

BUILDING

Building this project requires a working copy of ChezScheme. Chez need not be
installed anywhere specific, even building inside the repository should work.
Once ChezScheme is ready, you can build chez-exe like so:

    make bootpath=... [libpath=...] [incdir=...] [scheme=...]

Of the make variables, only bootpath must be specified. Bootpath indicates
where to find petite.boot and scheme.boot
libpath, incdir, and scheme are all optional.

libpath controls where to find the kernel.o file. This defaults to $bootpath.
incdir controls where to find scheme.h. This defaults to $bootpath.
scheme controls the name of the executable used. This defaults to "scheme".

Once built, there two important files: compile-chez-program and chez.a

chez.a is a static library that contains embed_target.o and the kernel.o
from the ChezScheme tree.
compile-chez-program is a program that will take a scheme program and produce
an executable that will run the given scheme program. It uses ChezScheme's
compile-whole-program to generate a single compiled file that contains the
given program as well as all reachable source libraries. Any scheme files
accessed with (load ...) or not available in source form will need to be
distributed with the generated executable.

RUNNING:

    compile-chez-program [--libdirs ...] [--libexts ...] [--srcdirs ...]
        [--optimize-level 0|1|2|3] program-file.ss [...]

compile-chez-program understands CHEZSCHEMELIBDIRS and CHEZSCHEMELIBEXTS in
the same way that the ChezScheme executables understand them.
compile-chez-program also recognizes the following command line arguments:
  --libdirs        (same as ChezScheme)
  --libexts        (same as ChezScheme)
  --srcdirs
  --optimize-level (same as ChezScheme)
The --srcdirs argument alters the source-directories parameter exactly like
--libdirs alters the library-directories parameter. The rest of the arguments
behave the same as their counterparts in the ChezScheme executables.
All of these arguments are optional. compile-chez-program assumes that the
first unknown argument is the filename to compile. Any further arguments are
passed to the C compiler.

For example:
    compile-chez-program foo.ss -lGL -lGLU -lGLEW
will also link against the OpenGL libraries, allowing the scheme source to
access the shared libraries by calling (load-shared-object #f) instead of
loading each object file individually.

SUPPORTED SYSTEMS:
* Linux
* Mac OS X
